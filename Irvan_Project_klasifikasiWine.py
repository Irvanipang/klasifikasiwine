# -*- coding: utf-8 -*-
"""Tugas DSF - Data Types and Structure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dpLbmLHa-xX98d3gSqZgVRCpSDqj7Rug

# **1. Import Library**
"""

# Import library yang diperlukan
import numpy as np  # Untuk operasi numerik
import pandas as pd  # Untuk manipulasi data dalam bentuk tabel (DataFrame)
import matplotlib.pyplot as plt  # Untuk visualisasi data
import seaborn as sns  # Tambahan untuk visualisasi data

# Import library dari scikit-learn untuk machine learning
from sklearn import datasets  # Untuk memuat dataset bawaan dari sklearn
from sklearn.model_selection import train_test_split  # Untuk membagi data menjadi train dan test
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report # untuk mengevaluasi performa model klasifikasi seperti akurasi, precision, recall, dan F1-score.
from sklearn.linear_model import LogisticRegression  # Untuk membuat model Regresi Logistik
from sklearn.svm import SVC  # Untuk membuat model Support Vector Machine (SVM)

"""# **2. Read Dataset**"""

# Memuat dataset Wine dari scikit-learn
wine = datasets.load_wine()

X = wine.data    # inputan untuk machine learning
y = wine.target  # output yang dinginkan dari machine learning

# Mengonversi data fitur dan target menjadi DataFrame
df_X = pd.DataFrame(X, columns=wine.feature_names)
df_y = pd.Series(y, name='target')

df_X

df_y

# Gabungkan fitur dan target dalam satu DataFrame
df = pd.concat([df_X, df_y], axis=1)

df.head(10)

df.info()

df['target'].unique()

df.describe()

"""# **3. Split Data**"""

# Membagi data menjadi train dan test
X_train, X_test, y_train, y_test = train_test_split(df_X, df_y, test_size=0.2, random_state=42)

"""# **4. Train the Model**

# ***Regresi Logistic***
"""

# Membuat dan melatih model Regresi Logistic
lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)

"""# ***Support Vector Machine (SVC)***"""

# Inisialisasi dan latih model SVC
model_svc = SVC(kernel='rbf', C=2)
model_svc.fit(X_train, y_train)

"""# **5. Predict & Evaluate**

# ***Regresi Logistic***
"""

# 4. Memprediksi dan mengevaluasi
y_pred = lr_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

print("Laporan Klasifikasi:")
print(f"Akurasi: {accuracy * 100:.2f}%")

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)

# Plot Confusion Matrix using seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=wine.target_names, yticklabels=wine.target_names)
plt.xlabel("Prediksi")
plt.ylabel("Aktual")
plt.title("Confusion Matrix")
plt.show()

print(classification_report(y_test, y_pred, target_names=wine.target_names))

"""# ***Support Vector Machine (SVC)***"""

# 4. Memprediksi dan mengevaluasi
y_pred = model_svc.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

print("Laporan Klasifikasi:")
print(f"Akurasi: {accuracy * 100:.2f}%")

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)

# Plot Confusion Matrix using seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=wine.target_names, yticklabels=wine.target_names)
plt.xlabel("Prediksi")
plt.ylabel("Aktual")
plt.title("Confusion Matrix")
plt.show()

print(classification_report(y_test, y_pred, target_names=wine.target_names))

"""Dari 2 Algoritma yang digunakan yaitu Regresi Logistic dan Support Vector Classifier (SVC) didapatkan masing-masing akurasi dari algoritma yang digunakan sebesar 97% (Regresi Logistic) dan 81% (Support Vector Classifier (SVC)). disimpulkan bahwa akurasi algoritma Regresi Logistic lebih tinggi dibandingkan Algoritma Support Vector Classifier (SVC)."""